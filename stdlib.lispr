; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function Definitions
(def {fun} (\ {f b}
	{def (head f) (\ (tail f) b)}))

; Unpack List for Function
(fun {unpack f l}
	{eval (join (list f) l)})

; Pack List for Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform several things in sequence
(fun {do & l}
	{if (== l nil)
		{nil}
		{last l}})

; Open new local scope
(fun {let b}
	{((\ {_} b) ())})

; Miscellaneous
(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

; First, second, or third item in a list
(fun {fst l} {eval (head l)})
(fun {snd l} {eval (head (tail l))})
(fun {trd l} {eval (head (tail (tail l)))})

; List length
;(fun {len l}
;	{if (== l nil)
;		{0}
;		{+ 1 (len (tail l))}})

; Nth item in a list
(fun {nth n l}
	{if (== n 0)
		{fst l}
		{nth (- n 1) (tail l)}})

; Last item in a list
(fun {last l}
	{nth (- (len l) 1) l})

; Take n items from a list
(fun {tke n l}
	{if (== n 0)
		{nil}
		{join (head l) (take (- n 1) (tail l))}})

; Drop n items from a list
(fun {drop n l}
	{if (== n 0)
		{l}
		{drop (- n 1) (tail l)}})

; Split a list into two lists at n
(fun {split n l}
	{list (take n l) (drop n l)})

; Element of a list
(fun {elem x l}
	{if (== l nil)
		{false}
		{if (== x (fst l))
			{true}
			{elem x (tail l)}}})

; Apply a function to each member of a list
(fun {map f l}
	{if (== l nil)
		{nil}
		{join (list (f (fst l)))
					(map f (tail l))}})

; Retain elements of list if return true when passed to a function
(fun {filter f l}
	{if (== l nil)
		{nil}
		{join (if (f (fst l)) {head l} {nil}) 
					(filter f (tail l))}})

; Fold left
(fun {foldl f z l}
	{if (== l nil)
		{z}
		{foldl f (f z (fst l)) (tail l)}})

; Elegant sum and product of list
(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})

(fun {select & cs}
	{if (== cs nil)
		{error "No selection found"}
		{if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}})

(def {otherwise} true)

; Print day-of-month suffix
(fun {month-day-suffix i}
	{select
		{(== i 0) "st"}
		{(== i 1) "nd"}
		{(== i 2) "rd"}
		{otherwise "th"}})

; C-style switch
(fun {case x & xs}
	{if (== xs nil)
		{error "No case found"}
		{if (== x (fst (fst xs))) {snd (fst xs)}
				{unpack case (join (list x) (tail cs))}}})

; Day of the week by number
(fun {day-name x}
	{case
		{0 "Monday"}
		{1 "Tuesday"}
		{2 "Wednesday"}
		{3 "Thursday"}
		{4 "Friday"}
		{5 "Saturday"}
		{6 "Sunday"}})

; Fibonacci
(fun {fib n}
	{select
		{(== n 0) 0}
		{(== n 1) 1}
		{otherwise (+ (fib (- n 1)) (fib (- n 2)))}})
